# Generated by Django 5.0 on 2023-12-30 16:59

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('plannumber', models.CharField(db_column='PlanNumber', max_length=50, primary_key=True, serialize=False)),
                ('area', models.FloatField(blank=True, db_column='Area', null=True)),
                ('location', models.CharField(blank=True, db_column='Location', max_length=255, null=True)),
                ('surveyor', models.CharField(blank=True, db_column='Surveyor', max_length=255, null=True)),
                ('coordinatesystem', models.CharField(blank=True, db_column='CoordinateSystem', max_length=255, null=True)),
                ('date', models.DateField(blank=True, db_column='Date', null=True)),
            ],
            options={
                'db_table': 'plan',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Coordinate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pillarnumber', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+$', message='Pillar number must be alphanumeric')])),
                ('eastings', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Eastings must be a positive number')])),
                ('northings', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Northings must be a positive number')])),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cadastre.plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'coordinate',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(default='', max_length=100)),
                ('company_name', models.CharField(default='', max_length=100)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('profile_pic', models.ImageField(blank=True, upload_to='profile_pics')),
                ('address', models.CharField(default='', max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('phone', models.CharField(default='0000000000', max_length=20)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_data', models.TextField(blank=True, null=True)),
                ('coordinates', models.ManyToManyField(to='cadastre.coordinate')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cadastre.plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
            },
        ),
    ]
